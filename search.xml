<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>RPG Game开发日志(一)</title>
    <url>/2020/10/11/RPG-Dev-Log-1/</url>
    <content><![CDATA[<p>涉及内容：简单场景创建；鼠标跟随贴花制作；动画蓝图制作；移动操控绑定等。</p>
<a id="more"></a>

<h1 id="涉及内容"><a href="#涉及内容" class="headerlink" title="涉及内容"></a>涉及内容</h1><h2 id="简单场景创建"><a href="#简单场景创建" class="headerlink" title="简单场景创建"></a>简单场景创建</h2><ol>
<li>清理默认物体，如Floor、Capsule等;</li>
<li>添加Box Brush，Transform&gt;Location=(0,0,0)，Brush Settings &gt; X=5000,Y=5000,Z=800;</li>
<li>快捷键ALT复制一个，Transform&gt;Location(0,0,50)，Brush Settings &gt; X=4800,Y=4800,Z=700, Brush Type=Subtractive;</li>
<li>利用Geometry Editing创建几个测试平台、楼梯等；</li>
<li>添加StarterContent初学者内容包，为场景物体添加材质。</li>
<li>保存场景为Training至RPG_Game&gt;Maps。</li>
</ol>
<img src="https://img-blog.csdnimg.cn/20201011122013690.png">

<h2 id="鼠标跟随贴花制作"><a href="#鼠标跟随贴花制作" class="headerlink" title="鼠标跟随贴花制作"></a>鼠标跟随贴花制作</h2><ol>
<li>图标来源：<a href="https://www.iconfont.cn/">阿里巴巴矢量图标库</a>  </li>
<li>添加Goal图标至RPG_Game&gt;Textures；</li>
<li>创建材质球M_GoalDecal，设置Material Domain=Deferred Decal，Blend Mode=Translucent，Decal Blend Mode = Emissive；</li>
<li>设置Material蓝图参数；<img src='https://img-blog.csdnimg.cn/20201011123828721.png'></li>
<li>创建材质实例Inst_GoalDecal，Sets the preview mesh to a plane primitive，修改公开变量Color和EmissiveValue(高光度)；</li>
<li>以上M_GoalDecal、Inst_GoalDecal添加至RPG_Game&gt;Materials；</li>
<li>创建Actor BP_GoalDecal至RPG_Game&gt;Actors，添加Decal组件和Box collision，在Event Graph 内添加Begin Overlap(Box)事件。<img src='https://img-blog.csdnimg.cn/20201011124835193.png'></li>
</ol>
<h2 id="动画蓝图制作"><a href="#动画蓝图制作" class="headerlink" title="动画蓝图制作"></a>动画蓝图制作</h2><ol>
<li>骨骼网格体、动画来源：虚幻商城[虚幻争霸：心菲]</li>
<li>以下将会用到Skeletal Mesh (Shinbi)，Animation Sequence (Shibi_Fwd、Shibi_Idle);</li>
<li>创建一维混合空间Shibi_BlendSpace1D，Horizontal Axis 命名为 Speed，区间设置为[0,400],0处添加Idle,400处添加Fwd;</li>
<li>创建动画蓝图ABP_Shibi至RPG_Game&gt;Characters&gt;Animations，新建状态机:Entry-&gt;Idle_Move,新建变量:Speed,设置动画蓝图如下；<img src='https://img-blog.csdnimg.cn/20201011130431251.png'></li>
<li>进入Event Graph,设置动画蓝图事件如下。<img src='https://img-blog.csdnimg.cn/20201011130521861.png'></li>
</ol>
<h2 id="移动操控绑定"><a href="#移动操控绑定" class="headerlink" title="移动操控绑定"></a>移动操控绑定</h2><ol>
<li>创建Character BP_RPG_Character至RPG_Game&gt;Blueprints，并创建子类Char_Shibi;</li>
<li>打开Char_Shibi,添加SpringArm和Camera(依附于SpringArm)，设置SpringArm Rotation=(0,-45,0),Target Arm Length=650;</li>
<li>创建RPG_PlayerController至RPG_Game&gt;Blueprints；</li>
<li>创建RPG_Game_Mode至RPG_Game&gt;Blueprints,设置Player Controller Class为RPG_PlayerController,Default Pawn Class为Char_Shibi;</li>
<li>打开项目设置，设置Default GameMode 为RPG_GameMode,Default Maps为Training,添加轴映射MoveForward(W/S)、MoveRight(A/D)、LookUp(Mouse Y)、Turn(Mouse X);</li>
<li>打开RPG_PlayerController,创建函数CancelMovementCommand,用于处理角色移动状态时销毁鼠标贴花；<img src='https://img-blog.csdnimg.cn/20201011132117897.png'></li>
<li>Shibi Object获取；<img src='https://img-blog.csdnimg.cn/20201011132352696.png'></li>
<li>鼠标贴花生成；<img src='https://img-blog.csdnimg.cn/20201011132417698.png'></li>
<li>移动转向控制。<img src='https://img-blog.csdnimg.cn/20201011133109943.png'><img src='https://img-blog.csdnimg.cn/20201011133157497.png' ><img src='https://img-blog.csdnimg.cn/20201011133223590.png'><img src='https://img-blog.csdnimg.cn/2020101113325827.png'><img src='https://img-blog.csdnimg.cn/20201011133327798.png'></li>
</ol>
<h1 id="最终效果展示"><a href="#最终效果展示" class="headerlink" title="最终效果展示"></a>最终效果展示</h1><img src='https://img-blog.csdnimg.cn/20201012174104608.png'>

<img src='https://img-blog.csdnimg.cn/20201012174324500.png'>]]></content>
      <categories>
        <category>Logs</category>
      </categories>
      <tags>
        <tag>UE_4.22</tag>
      </tags>
  </entry>
  <entry>
    <title>RPG Game开发日志(二)</title>
    <url>/2020/10/12/RPG-Dev-Log-2/</url>
    <content><![CDATA[<p>涉及内容：UI血条创建；绑定角色属性等。</p>
<a id="more"></a>

<h1 id="涉及内容"><a href="#涉及内容" class="headerlink" title="涉及内容"></a>涉及内容</h1><h2 id="UI血条创建"><a href="#UI血条创建" class="headerlink" title="UI血条创建"></a>UI血条创建</h2><p>UI素材来源：虚幻商城[User Interface Kit]</p>
<h3 id="材质球制作"><a href="#材质球制作" class="headerlink" title="材质球制作"></a>材质球制作</h3><ol>
<li>创建Material [M_GlassBall]，将gb（T5,include frame,gloss,over) 拖拽进材质球蓝图;</li>
<li>创建Material Function [MF_Vertical]，用于处理血球垂直方向的颜色线性渐变，此处Clamp限制Alpha(0~1)，减少性能消耗；<img src='https://img-blog.csdnimg.cn/20201012182956977.png'></li>
<li>打开[M_GlassBall]，完成第一部分蓝图，涉及UV平衡器（Panner）、图像混合模式（Blend Overlay)、插值计算等,完成Fill (V3)参数传递<img src='https://img-blog.csdnimg.cn/20201012183538901.png'></li>
<li>完成第二部分蓝图，MF_Vertical—&gt;M_GlassBall，这部分主要设计血球的框架和形状，Ceil用于向上取整<img src='https://img-blog.csdnimg.cn/20201012184100410.png'></li>
<li>创建材质实例Inst_GlassBall,设置Color、Intensity（强度）、Percentage（血量百分比）等参数</li>
</ol>
<h3 id="控件蓝图设计"><a href="#控件蓝图设计" class="headerlink" title="控件蓝图设计"></a>控件蓝图设计</h3><ol>
<li>创建Widget Blueprint [W_ActionBar]，删除默认的canvas panel，设置为custom模式，添加Scale Box,组件结构如下<img src='https://img-blog.csdnimg.cn/20201012181046997.png'>Textures涉及:actionbar frame(T3,include L ,R,Center);</li>
<li>创建Widget Blueprint [W_GlassBall]，同上，从User Created分类下，在Scale Box内添加预设的Inst_GlassBall，添加Event Construct事件，用于设置血球颜色以便于灵力球的添加和血量动态颜色；<img src='https://img-blog.csdnimg.cn/20201012185331871.png'></li>
<li>创建Widget Blueprint [W_PC_Main]，添加预设的Action Bar以及Glass Ball，并调整anchors,Size,Alignment,etc;</li>
<li>打开Char_Shibi人物蓝图，在Event Graph添加W_PC_Main控件即可。</li>
</ol>
<h2 id="绑定角色属性"><a href="#绑定角色属性" class="headerlink" title="绑定角色属性"></a>绑定角色属性</h2><h3 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h3><ol>
<li>准备工作：创建枚举[E_Attribute]=[None,Health,Mana,Stamain],创建结构体[S_Attribute]=[CurrentValue(Float),MinValue(Float),MaxValue(Float),ClassBallWidget(W Glass Ball)];</li>
<li>核心数据结构：E_Attribute 到 S_Attribute Map 映射关系；</li>
<li>函数[S_Attribute] GetAttribute(E_Attribute),用于根据键值对获取某一属性的相关值；</li>
<li>函数[void] SetAttribute(E_Attribute,S_Attribute),用于添加新的属性键值对；</li>
<li>函数[void] SetupAttributeBars()，实装Health&amp;Mana等属性绑定；</li>
<li>函数[S_Attribute] UpdateAttribute(E_Attribute),用于计算和更新血球百分比，动态颜色；</li>
<li>函数[void] ModifyAttribute(E_Attribute,Float),用于伤害显示，同时调用4、6。</li>
</ol>
<h3 id="受伤-回血实装"><a href="#受伤-回血实装" class="headerlink" title="受伤/回血实装"></a>受伤/回血实装</h3><ol>
<li>GetAttribute<img src='https://img-blog.csdnimg.cn/20201012195017253.png'></li>
<li>SetAttribute<img src='https://img-blog.csdnimg.cn/20201012195137455.png'></li>
<li>SetupAttributeBars<img src='https://img-blog.csdnimg.cn/20201012195223773.png'></li>
<li>UpdateAttribute<img src='https://img-blog.csdnimg.cn/20201012195331529.png'></li>
<li>ModiftAttribute<img src='https://img-blog.csdnimg.cn/20201012195518275.png'></li>
</ol>
<h3 id="受伤-回血数字显示"><a href="#受伤-回血数字显示" class="headerlink" title="受伤/回血数字显示"></a>受伤/回血数字显示</h3><ol>
<li>创建Widget [W_DamageText]，添加FadeOut动画，用于伤害数字浮动显示并消失；<img src='https://img-blog.csdnimg.cn/2020101219394440.png'></li>
<li>打开W_DamageText 事件图表，事件开始构造时播放1s的Fadeout动画,添加自定义事件UpdateValue，用于受伤/回血时不同的文字内容&amp;颜色显示；</li>
<li>创建Widget Component [WC_OnDamaged],创建自定义事件SetDamageText,内部调用UpdateValue事件；</li>
<li>打开函数ModifyAttribute，在Health值被修改前将WC_OnDamaged控件调出,并调用自定义事件SetDamageText，将会自动播放FadeOut动画。</li>
</ol>
<h1 id="最终效果展示"><a href="#最终效果展示" class="headerlink" title="最终效果展示"></a>最终效果展示</h1><img src='https://img-blog.csdnimg.cn/20201012175955500.png'>

<img src='https://img-blog.csdnimg.cn/20201012180028750.png'>]]></content>
      <categories>
        <category>Logs</category>
      </categories>
      <tags>
        <tag>UE_4.22</tag>
      </tags>
  </entry>
  <entry>
    <title>RPG Game开发日志(三)</title>
    <url>/2020/10/13/RPG-Dev-Log-3/</url>
    <content><![CDATA[<p>涉及内容：人物等级属性绑定，经验条动画效果等。</p>
<a id="more"></a>

<h1 id="涉及内容"><a href="#涉及内容" class="headerlink" title="涉及内容"></a>涉及内容</h1><p>UI素材来源：</p>
<p>虚幻商城[Advanced Mission And Notification System]</p>
<p><a href="http://www.aigei.com/">爱给网</a> [SlicedImages]</p>
<h2 id="经验条动画效果"><a href="#经验条动画效果" class="headerlink" title="经验条动画效果"></a>经验条动画效果</h2><ol>
<li><p>创建Widget [W_Level]，涉及素材资源：进度条和经验徽章边框,</p>
<p>层级面板如下,<img src='https://img-blog.csdnimg.cn/20201013221953333.png'></p>
<p>最终效果,<img src='https://img-blog.csdnimg.cn/20201013222300719.png'></p>
</li>
<li><p>创建HideXPBar动画(0.5s，第一帧X轴缩放为0，最后一帧为1);<img src='https://img-blog.csdnimg.cn/20201013222531735.png'></p>
</li>
<li><p>打开Event Graph，事件构造时绑定Character Level 至Level Text;</p>
</li>
<li><p>创建宏 [Exec] PlayAnimation(Exec,Boolean)，用于经验条动画循环播放以及播放模式设置；<img src='https://img-blog.csdnimg.cn/20201013223428875.png'></p>
</li>
<li><p>创建函数 [void] IncreaseXP()，用于更新level经验条百分比，此处利用Handle可以在任意位置暂停和恢复运行经验条动画；<img src='https://img-blog.csdnimg.cn/20201013223800968.png'></p>
</li>
<li><p>在StarterContent资源包中搜索P_Explosion粒子特效，删除FireBall、Sparks、fire_Light、Smoke效果，更改shockwave参数，达到以下效果；<img src='https://img-blog.csdnimg.cn/20201013225153345.png'></p>
</li>
<li><p>搜索Shibi角色升级的相关动画，在合适位置添加粒子特效动画和音效，并以此为基础创建AnimMontage;<img src='https://img-blog.csdnimg.cn/2020101322552387.png'></p>
</li>
<li><p>打开控件蓝图W_PC_Main，关联Shibi和W_Level，以便获取character movement;</p>
</li>
<li><p>创建自定义事件 void GetXP(Float)，调用PlayAnimation和IncreaseXP，完成经验的增加，等级的更新，经验条上限更改，以及升级时添加动画蒙太奇（蓝图较复杂，不再展示）；</p>
</li>
<li><p>打开人物蓝图Char_Shibi，添加Key F键盘事件，调用自定义事件GetXP。</p>
</li>
</ol>
<h2 id="任务等级属性绑定"><a href="#任务等级属性绑定" class="headerlink" title="任务等级属性绑定"></a>任务等级属性绑定</h2><h3 id="血条-蓝条材质球创建"><a href="#血条-蓝条材质球创建" class="headerlink" title="血条/蓝条材质球创建"></a>血条/蓝条材质球创建</h3><ol>
<li><p>创建Material，Material Domain设置为User Interface，Blend Mode设置为Masked,导入uf_fill_green（填充效果图），相关蓝图如下；<img src='https://img-blog.csdnimg.cn/20201013230852397.png'> <img src='https://img-blog.csdnimg.cn/20201013230948299.png'></p>
</li>
<li><p>创建材质实例Inst_HealthBar和HealthRemove，修改公开变量Texture 、Scaler(PercentLeft、PercentRight)、Vector(Color)；</p>
</li>
<li><p>用同样的方法复制创建Inst_ManaBar和Inst_ManaRemove;</p>
</li>
</ol>
<h3 id="血条-蓝条-角色Border控件蓝图创建"><a href="#血条-蓝条-角色Border控件蓝图创建" class="headerlink" title="血条/蓝条/角色Border控件蓝图创建"></a>血条/蓝条/角色Border控件蓝图创建</h3><ol>
<li><p>创建Widget [W_HealthBar]，</p>
<p>层级面板如下，<img src='https://img-blog.csdnimg.cn/2020101323190811.png'></p>
<p>最终效果；<img src='https://img-blog.csdnimg.cn/20201013232000940.png'></p>
</li>
<li><p>用同样的方法复制一份，修改参数命名为W_ManaBar;</p>
</li>
<li><p>创建Widget [W_CharacterBorder]，整合frame、HealthBar、ManaBar、StaminaBar、LevelText&amp;Border、Figure&amp;Border、BuffBox，</p>
<p>层级面板如下,<img src='https://img-blog.csdnimg.cn/20201013232626224.png'></p>
<p>最终效果；<img src='https://img-blog.csdnimg.cn/20201013232731899.png'></p>
</li>
</ol>
<h3 id="Shibi人物蓝图修改"><a href="#Shibi人物蓝图修改" class="headerlink" title="Shibi人物蓝图修改"></a>Shibi人物蓝图修改</h3><ol>
<li>修改[S_Attribute] UpdateAttribute(E_Attribute)为[void] UpdateAttribute(E_Attribute)，扩展函数功能（由原先的计算和更新血球百分比，动态颜色，扩展至Mana、Stamina，函数核心逻辑不变；<img src='https://img-blog.csdnimg.cn/20201013233125525.png'></li>
<li>修改[void] SetupAttributeBars()，扩展函数功能（由原先的Health、Mana扩展至Stamina);<img src='https://img-blog.csdnimg.cn/20201013233517102.png'></li>
<li>修改Num-/+ 键盘事件，测试扩展至Mana、Stamina;<img src='https://img-blog.csdnimg.cn/20201013233813393.png'></li>
</ol>
<h1 id="最终效果展示"><a href="#最终效果展示" class="headerlink" title="最终效果展示"></a>最终效果展示</h1><img src='https://img-blog.csdnimg.cn/20201013220531552.gif'>

<img src='https://img-blog.csdnimg.cn/20201013220800638.gif'>

]]></content>
      <categories>
        <category>Logs</category>
      </categories>
      <tags>
        <tag>UE_4.22</tag>
      </tags>
  </entry>
  <entry>
    <title>RPG Game开发日志(四)</title>
    <url>/2020/10/14/RPG-Dev-Log-4/</url>
    <content><![CDATA[<p>涉及内容：自动回复系统，迷你小地图制作，IceLands场景导入等。</p>
<a id="more"></a>

<h1 id="涉及内容"><a href="#涉及内容" class="headerlink" title="涉及内容"></a>涉及内容</h1><p>UI素材来源：</p>
<p>虚幻商城[Infinity Blade IceLands]</p>
<p><a href="https://www.iconfont.cn/">阿里巴巴矢量图表库</a> [关键词：目标]</p>
<h2 id="自动回复系统"><a href="#自动回复系统" class="headerlink" title="自动回复系统"></a>自动回复系统</h2><ol>
<li>打开W_Level，创建Event Dispatchers(事件调度器) UpdateLevel(Integer)，并在CharacterLevel更新后调用;</li>
<li>打开人物蓝图Char_Shibi，创建自定义事件[void] UpLevel(Integer),用于升级后更新血量/蓝条/耐力值上限,并将W_Level中有关升级粒子动画特效的蓝图迁移整合；<img src='https://img-blog.csdnimg.cn/20201014174148886.png'></li>
<li>修改[void] ModifyAttribute(E_Attribute,Float)为[void] ModifyAttribute(E_Attribute,Float,Float),扩展函数功能，第三个参数MaxValue用于更新升级后的血量/蓝条/耐力值上限，思路与ModifyValue类似；</li>
<li>在Event BeginPlay事件末尾绑定事件调度器UpdateLevel至自定义事件UpLevel;<img src='https://img-blog.csdnimg.cn/20201014174040200.png'></li>
<li>打开W_Level事件图表，将GetXP事件后的结点折叠至图表LoopLevel;</li>
<li>打开W_PC_Main事件图表，删除Event Construct后有关获取W_Level等自定义组件的节点；</li>
<li>打开S_Attribute，添加RegenInterval[Float]（回复间隔）、MaxRegenTime[Float]（最大回复时间）、RegenFunctionName[String]（回复回调函数名）、RegenTimerHandle[TimerHandle]（回复TimerHandle);</li>
<li>打开Char_Shibi，设置Attributes，单次回复量=MaxValue/(RegenInterval*MaxRegenTime)，按照公式，设置数值，使得单次回复量耐力值&gt;血量&gt;灵力；</li>
<li>创建回调函数[void]HealthRegenTick()、[void]ManaRegenTick()、[void]StaminaRegenTick()回调函数，用于脱战状态和战斗状态回复数值计算，三个函数仅参数不同；<img src='https://img-blog.csdnimg.cn/20201014180132825.png'></li>
<li>创建函数[void] HandleRegeneration(E_Attribute)，当状态回满时，使用TimerHandle中断回调函数;<img src='https://img-blog.csdnimg.cn/20201014180301780.png'></li>
<li>创建自定义事件Regenerations,在Event BeginPlay调用，用于循环更新Health/Mana/Stamina相关值，事件末尾调用HandleRegeneration，启用和中止相关tick函数；<img src='https://img-blog.csdnimg.cn/20201014180647554.png'></li>
<li>函数ModifyAttribute末尾也添加HandleRegeneration的调用，每次修改后都进行一次TimerHandle核对；</li>
</ol>
<h2 id="迷你小地图制作"><a href="#迷你小地图制作" class="headerlink" title="迷你小地图制作"></a>迷你小地图制作</h2><ol>
<li>创建Render Target [MiniMap],右键创建Material [M_MiniMap_Mat]，设置Material Domain=User Interface,Blend Mode=Translucent，编辑蓝图如下;<img src='https://img-blog.csdnimg.cn/2020101423132354.png'></li>
<li>创建材质实例[Inst_MiniMap_Mat];</li>
<li>选取父类为SceneCapture2D创建蓝图MiniCapture,将TextureTarget设置为[MiniMap],并取消勾选天气、光线、特效的ShowFlags；</li>
<li>打开人物蓝图BP_RPG_Character，添加SpringArm、ChildActor,调整SpringArm的Rotation和Arm Length；</li>
<li>导入direction图标，修改Compression Settings=UserInterface2D(RGBA)，Texture Group=UI，右键创建sprite；</li>
<li>返回BP_RPG_Character，添加PaperSprite，将刚创建的direction_sprite添加进来，调整rotation，修改颜色，并将碰撞预设设为NoCollision,并勾选Render&gt;Owner No See;</li>
<li>创建Widget [W_MiniMap]，将Inst_MiniMap_Mat以及相关minimap frame添加进来，并调整zOder顺序，根据[W_MiniMap]中的效果修改Inst_MiniMap_Mat中Density和Radius的值；</li>
<li>在W_MiniMap中添加Plus和Minus按钮，用于缩放地图，设计思路为：获取Actor[MiniCapture]的拷贝，并通过它获取Capture Component 2D,修改FOV Angle;<img src='https://img-blog.csdnimg.cn/20201014232845269.png'></li>
</ol>
<h2 id="IceLands场景导入"><a href="#IceLands场景导入" class="headerlink" title="IceLands场景导入"></a>IceLands场景导入</h2><ol>
<li>将Map [FrozenCove]导入并构建，打开World Settings，设置Game Mode 为RPG_GameMode;</li>
<li>完成光源的简单布置，光源大小、颜色、数量等，将部分PointLight由Stationary改为Static；</li>
<li>完成场景地面的延伸扩展，Nav Mesh Bounds的延伸扩展（需勾选Can ever Affect Navigation),为扩展的地面添加Default碰撞预设；</li>
<li>修改玩家出生点至平台。</li>
</ol>
<h1 id="最终效果展示"><a href="#最终效果展示" class="headerlink" title="最终效果展示"></a>最终效果展示</h1><img src='https://img-blog.csdnimg.cn/20201014171750989.gif'>

<img src='https://img-blog.csdnimg.cn/2020101417191758.png'>]]></content>
      <categories>
        <category>Logs</category>
      </categories>
      <tags>
        <tag>UE_4.22</tag>
      </tags>
  </entry>
  <entry>
    <title>RPG Game开发日志(五)</title>
    <url>/2020/10/18/RPG-Dev-Log-5/</url>
    <content><![CDATA[<p>涉及内容：跳跃动作制作，创建任务系统（开篇）</p>
<a id="more"></a>

<h1 id="涉及内容"><a href="#涉及内容" class="headerlink" title="涉及内容"></a>涉及内容</h1><p>虚幻商城[Advanced Mission And Notification System]</p>
<h2 id="跳跃动作制作"><a href="#跳跃动作制作" class="headerlink" title="跳跃动作制作"></a>跳跃动作制作</h2><ol>
<li>打开ABP_Shibi事件图表，将Is Falling返回值保存至变量IsInAir;</li>
<li>进入状态机，添加Idle_Move&lt;=&gt;Jump状态过渡，并将过渡规则与IsInAir关联；</li>
<li>进入Jump状态，新建状态机Jump，点击进入，设置Entry-&gt;JumpStart=&gt;Loop=&gt;JumpEnd状态过渡，并将过渡规则设置为自动；</li>
<li>为JumpStart、Loop、JumpEnd添加Jump_Start、Jump_Apex、Jump_Land,并调整播放速率；</li>
<li>打开Char_Shibi事件图表，添加Space Bar键盘事件，使得角色获得二段跳能力；<img src='https://img-blog.csdnimg.cn/20201018130500837.png'></li>
<li>打开CharacterMovement细节面板，设置Character Movement:Jump/Falling，Jump Z Velocity=620，Air Control=0.5;</li>
</ol>
<h2 id="创建任务系统（开篇）"><a href="#创建任务系统（开篇）" class="headerlink" title="创建任务系统（开篇）"></a>创建任务系统（开篇）</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol>
<li>创建枚举E_QuestCategories = {主线任务，支线任务，副本任务}；</li>
<li>创建枚举E_Regions = {冰岛，洞穴，香格里拉}；</li>
<li>创建枚举E_SubGoalType = {Custom,Hunt,Search,Talk};</li>
<li>创建结构体S_QuestReward = {Money(Integer),Experience(Integer),Prestige(Integer)};</li>
<li>创建结构体S_TargetLocation = {HasLocation?(Boolean),Location(Vector)};</li>
<li>创建结构体S_SubGoalInfo;<img src='https://img-blog.csdnimg.cn/20201018132339967.png'></li>
<li>创建结构体S_QuestInfo;<img src='https://img-blog.csdnimg.cn/20201018132440276.png'></li>
</ol>
<h3 id="创建任务实例的父类"><a href="#创建任务实例的父类" class="headerlink" title="创建任务实例的父类"></a>创建任务实例的父类</h3><h4 id="变量创建"><a href="#变量创建" class="headerlink" title="变量创建"></a>变量创建</h4><ol>
<li>创建Actor BP_MasterQuest,作为创建任务实例的父类；</li>
<li>创建变量QuestInfo(S_QuestInfo)，用于记录所有<strong>Quest</strong>信息；</li>
<li>创建变量StartSubGoalIndices(Integer [])，用于记录开始<strong>Quest</strong>所有<strong>SubGoal</strong>索引；</li>
<li>创建变量CurrentSubGoalIndices(Integer [])，用于记录当前<strong>Quest</strong>所有<strong>SubGoal</strong>索引；</li>
<li>创建变量CurrentHuntedAmount(Integer[])，用于记录当前猎杀数量；</li>
<li>创建变量CurrentSubGoalInfo(S_SubGoalInfo []),用于记录当前<strong>Quest</strong>所有<strong>SubGoal</strong>信息；</li>
<li>创建变量SelectedSubGoalIndex(Integer)，用于记录当前选择的<strong>SubGoal</strong>索引；</li>
</ol>
<h4 id="函数创建"><a href="#函数创建" class="headerlink" title="函数创建"></a>函数创建</h4><ol>
<li>创建函数void UpdateSubGoalInfo(),用于根据CurrentSubGoalIndices，更新CurrentSubGoalInfo；<img src='https://img-blog.csdnimg.cn/20201018135432102.png'></li>
<li>创建函数void SetopStartingSubGoals()，用于设置CurrentSubGoalIndices,并调用UpdateSubGoalInfo;<img src='https://img-blog.csdnimg.cn/20201018135750624.png'></li>
<li>创建函数Boolean GoToNextSubGoal()，用于判断当前Quest是否还有SubGoal，若有，则将NextIndex保存至CurrentSubGoalIndices，并返回true;<img src='https://img-blog.csdnimg.cn/20201018140354801.png'></li>
</ol>
<h3 id="创建UI"><a href="#创建UI" class="headerlink" title="创建UI"></a>创建UI</h3><h4 id="创建W-SubGoal"><a href="#创建W-SubGoal" class="headerlink" title="创建W_SubGoal"></a>创建W_SubGoal</h4><ol start="2">
<li><p>创建Widget [W_SubGoal],</p>
<p>层级面板如下<img src='https://img-blog.csdnimg.cn/20201018141429316.png'>,</p>
<p>最终效果<img src='https://img-blog.csdnimg.cn/20201018141521486.png'>;</p>
</li>
<li><p>打开事件图表</p>
<p><strong>创建变量</strong></p>
<p>W_Quest_SubGoalInfo(S_SubGoalInfo)，</p>
<p>W_Quest_AssignedQuest(BP_MasterQuest),</p>
<p>W_Quest(W_Quest),</p>
<p>SubGoalIndex(Integer),</p>
<p>SubGoalInfo(Text);</p>
<p><strong>创建函数</strong></p>
<p>void Update(),用于根据W_Quest_SubGoalInfo从W_Quest_AssignedQuest中获取QuestInfo，并更新Text;<img src='https://img-blog.csdnimg.cn/20201018143047970.png'></p>
<p><strong>函数调用</strong></p>
<p>事件开始构造时调用Update()，点击SelectedButton时调用W_Quest中的SelectSubGoal()；</p>
</li>
</ol>
<h4 id="创建W-Quest"><a href="#创建W-Quest" class="headerlink" title="创建W_Quest"></a>创建W_Quest</h4><ol>
<li><p>创建Widget [W_Quest]，</p>
<p>层级面板如下,<img src='https://img-blog.csdnimg.cn/20201018144005433.png'></p>
<p>最终效果<img src='https://img-blog.csdnimg.cn/20201018144100772.png'>;</p>
</li>
<li><p>打开事件图表</p>
<p><strong>创建变量</strong></p>
<p>SubGoalWidgets(W_SubGoal),</p>
<p>AssignedQuest(BP_MasterQuest),</p>
<p>SelectedSubGoal(W_SubGoal);</p>
<p><strong>创建函数</strong></p>
<ol>
<li><p>void GenerateSubGoal(),用于清空SubGolaVerticalBox，并从AssignedQuest中获取CurrentSubGoalInfo,循环添加至SubGolaVerticalBox;<img src='https://img-blog.csdnimg.cn/20201018145035536.png'></p>
</li>
<li><p>void UpdateCurrentSubGoal(),用于更新SubGoalIcon、SubGoalType、SubGoalInfo等控件信息；<img src='https://img-blog.csdnimg.cn/20201018152129831.png'></p>
</li>
<li><p>void SelectSubGoal(W_SubGoal)，用于激活SelectedButton,并调用UpdateCurrentSubGoal;<img src='https://img-blog.csdnimg.cn/202010181515354.png'></p>
</li>
<li><p>void UpdateQuest(Quest),用于从AssignedQuest中获取CurrentSubGoalInfo，根据任务Categories设置文本和任务图标样式，并调用GenerateSubGoal和UpdateCurrentSubGoal;<img src='https://img-blog.csdnimg.cn/20201018151930868.png'></p>
</li>
</ol>
</li>
</ol>
<h3 id="创建QuestManager"><a href="#创建QuestManager" class="headerlink" title="创建QuestManager"></a>创建QuestManager</h3><ol>
<li><p>创建Actor Componet [QuestManager]，并添加至Char_Shibi;</p>
</li>
<li><p>创建变量</p>
<p>CurrentQuest(BP_MasterQuest),</p>
<p>AllQuests(BP_MasterQuest[] Object reference),</p>
<p>AllQuestClasses(BP_MasterQuest[] class reference),</p>
<p>Shibi(Char_Shibi);</p>
</li>
<li><p>创建函数void AddQuest(BP_MasterQuest),用于从所有Quest class中添加、生成Quest Actor实例,并调用BP_MasterQuest.SetupStartingSubGoals和W_Quest.UpdateQuest;<img src='https://img-blog.csdnimg.cn/20201018153733195.png'></p>
</li>
</ol>
<h3 id="绑定Q键盘事件"><a href="#绑定Q键盘事件" class="headerlink" title="绑定Q键盘事件"></a>绑定Q键盘事件</h3><img src='https://img-blog.csdnimg.cn/20201018154325823.png'>



<h1 id="最终效果展示"><a href="#最终效果展示" class="headerlink" title="最终效果展示"></a>最终效果展示</h1><img src='https://img-blog.csdnimg.cn/20201018123029836.png'>

<img src='https://img-blog.csdnimg.cn/20201018123051461.png'>

]]></content>
      <categories>
        <category>Logs</category>
      </categories>
      <tags>
        <tag>UE_4.22</tag>
      </tags>
  </entry>
  <entry>
    <title>RPG Game开发日志(六)</title>
    <url>/2020/10/20/RPG-Dev-Log-6/</url>
    <content><![CDATA[<p>涉及内容：创建NPC，骨骼重定向，任务互动发放等；</p>
<a id="more"></a>

<h1 id="涉及内容"><a href="#涉及内容" class="headerlink" title="涉及内容"></a>涉及内容</h1><p>素材来源：</p>
<p>虚幻商城[Generic NPC Anim Pack]</p>
<p>虚幻商城[Infinity Blade:Warriors]</p>
<p>虚幻商城[Advanced Locomotion System]</p>
<p>内置Package[Mannequin]添加组件S</p>
<p>Adobe官网<a href="https://www.mixamo.com/">Mixamo</a></p>
<p><a href="https://www.iconfont.cn/">阿里巴巴矢量图表库</a> [关键词：圆、问号]</p>
<h2 id="创建NPC"><a href="#创建NPC" class="headerlink" title="创建NPC"></a>创建NPC</h2><ol>
<li>打开BP_RPG_Character，删除组件MapArm及其附属组件ChildActor;</li>
<li>以BP_RPG_Character为父类，创建蓝图BP_RPG_NPC;</li>
<li>下载地图指示图标，右键Apply Paper2D Texture Settings,并Create Sprite。将圆形图标添加到NPC的PaperSprite；</li>
<li>为BP_RPG_NPC添加组件SpringArm及其附属组件ChildActor,ChildActor Class选取MiniCapture;</li>
<li>打开PaperSprite，取消勾选Owner No See。并打开事件图表，添加隐藏PaperSprite的相关蓝图；<img src='https://img-blog.csdnimg.cn/20201020140456848.png'></li>
<li>以BP_RPG_NPC为父类，创建蓝图BP_NPC_Warriors,将SK_CharM_Pit导入进来；</li>
</ol>
<h2 id="NPC骨骼重定向"><a href="#NPC骨骼重定向" class="headerlink" title="NPC骨骼重定向"></a>NPC骨骼重定向</h2><h3 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h3><ol>
<li>打开SK_CharM_Pit的Retarget Manager,在SetupRig项目选择引擎默认的Humanoid人形骨骼；</li>
<li>点击AutoMap，自动匹配和建立骨骼映射，ShowBase/ShowAdvanced可用于查看基本骨骼和精细骨骼映射关系；</li>
<li>打开UE4_Mannequin_Skeleton，同样选取rig为Humanoid人形骨骼，自动建立骨骼映射，在ManageRetargetSource项目Add重定向源SK_Mannequin;</li>
<li>右键ThirdPerson_AnimBP,点击Retarget Anim Blueprints，Source为UE4_Mannequin_Skeleton，Target为SK_Mannequin_Skeleton，并确保base pose一致（Here is Apos)；<img src='https://img-blog.csdnimg.cn/20201020143635944.png'></li>
<li>将重定向后生成的动画添加至NPC蓝图即可；</li>
</ol>
<h3 id="进阶篇（Mixamo"><a href="#进阶篇（Mixamo" class="headerlink" title="进阶篇（Mixamo)"></a>进阶篇（Mixamo)</h3><ol>
<li>进入虚幻商城[Advanced Locomotion System]，可下载Tpos模型[ALS_Mannequin_T_Pose]；</li>
<li>打开ALS_Mannequin_T_Pose，选取CurrentPose创建PoseAssets[UE4_PoseAsset];</li>
<li>打开Apos的小白人骨骼模型，在Manage Retarget Base Pose项目，点击Modify,选择UE4_PoseAsset为当前pose,并import进来；</li>
<li>打开Mixamo官网下载的模型，手动建立骨骼映射；</li>
<li>右键ThirdPerson_AnimBP,点击Retarget Anim Blueprints，Source为UE4_Mannequin_Skeleton，Target为maria_j_j_ong_Skeleton，并确保base pose一致（Here is Tpos)；<img src='https://img-blog.csdnimg.cn/20201020150458513.png'></li>
</ol>
<h2 id="任务互动发放"><a href="#任务互动发放" class="headerlink" title="任务互动发放"></a>任务互动发放</h2><ol>
<li><p>创建Widget[W_NameForNPC]，</p>
<p>层级面板<img src='https://img-blog.csdnimg.cn/2020102015102250.png'>,</p>
<p>预览效果<img src='https://img-blog.csdnimg.cn/20201020151116574.png'></p>
</li>
<li><p>打开父类BP_RPG_Character，添加组件Widget，并在子类BP_RPG_NPC中添加Widget Class为W_NameForNPC，设置Space=Screen;</p>
</li>
<li><p>添加Sphere碰撞组件，设置碰撞预设;<img src='https://img-blog.csdnimg.cn/20201020151809375.png'></p>
</li>
<li><p>添加NPC互动效果蓝图 <img src='https://img-blog.csdnimg.cn/20201020152018538.png'></p>
</li>
<li><p>打开Char_Shibi,创建事件调度OnInteract，将与E键盘事件关联；</p>
</li>
<li><p>打开BP_RPG_NPC,创建自定义事件OnInteract，用于判断角色与NPC交互时，NPC身上是否有未分发的任务<img src='https://img-blog.csdnimg.cn/20201020152724167.png'></p>
</li>
<li><p>打开Char_Shibi，创建事件调度UpdateLevelForQuest(Integer),在UpLevel之后调用；</p>
</li>
<li><p>打开BP_RPG_NPC,创建变量QuestInLevel(Map)，将Level映射到Quest类。创建自定义事件UpdateQuest(Integer),用于在角色升级后，判断NPC身上是否产生新的任务；<img src='https://img-blog.csdnimg.cn/20201020153139435.png'></p>
</li>
<li><p>复制BP_MasterQuest两份，命名为BP_FirstEventQuest和BP_FirstSideQuest，并修改任务信息；</p>
</li>
</ol>
<h2 id="UI动画添加"><a href="#UI动画添加" class="headerlink" title="UI动画添加"></a>UI动画添加</h2><ol>
<li>打开W_Quest，为Border创建HideAll动画；<img src='https://img-blog.csdnimg.cn/20201020154300252.png'></li>
<li>为Text创建Text动画；<img src='https://img-blog.csdnimg.cn/20201020154331675.png'></li>
<li>打开W_SubGoal，为Border创建Show动画；<img src='https://img-blog.csdnimg.cn/20201020154514839.png'></li>
<li>打开W_Quest事件蓝图，添加宏[Exec] PlayHideAll(Exec,Boolean)，组织和关联HideAll、Text、Show动画执行时机<img src='https://img-blog.csdnimg.cn/20201020154615593.png'></li>
<li>创建自定义事件PlayQuest调用PlayHideAll，并在UpdateQuest末尾添加调用;</li>
</ol>
<h1 id="最终效果展示"><a href="#最终效果展示" class="headerlink" title="最终效果展示"></a>最终效果展示</h1><img src='https://img-blog.csdnimg.cn/20201020134241578.gif'>]]></content>
      <categories>
        <category>Logs</category>
      </categories>
      <tags>
        <tag>UE_4.22</tag>
      </tags>
  </entry>
</search>
